#!/usr/bin/env bash

set -eu

function check_os() {
  osname="$(uname -s | tr '[:upper:]' '[:lower:]')"
  case "$osname" in
    darwin)
      return 0
      ;;
    linux)
      return 0
      ;;
    *)
      echo -en "Unsupported OS: ${osname}\nsupported: darwin, linux\n"
      return 1
      ;;
  esac
}

function pod_name() {
  echo "port-forward-$(whoami)-${target_host}-${target_port}" | tr -cd '[:alnum:]-'
}

function find_tcp_port() {
  case "$osname" in
    darwin)
      read lower_port upper_port < <(sysctl -n net.inet.ip.portrange.first net.inet.ip.portrange.last | tr '\n' ' ')
      ;;
    linux)
      read lower_port upper_port < /proc/sys/net/ipv4/ip_local_port_range
      ;;
  esac

  while :; do
    local random_port=$(shuf -i ${lower_port}-${upper_port} -n 1)

    if [[ ! $(lsof -nP -iTCP:${random_port} -sTCP:LISTEN 2>/dev/null) ]]; then
      echo "${random_port}"
      break
    fi
  done
}


function run_port_forward() {
  local target_host="${1}"
  local target_port="${2}"
  local local_port="$(find_tcp_port)"

  local pod_name=$(pod_name "${target_host}" "${target_port}")

  echo "================================================================================"
  echo "forwarding tcp://localhost:${local_port} to tcp://${target_host}:${target_port}"
  echo "================================================================================"
  echo ""

  echo "================================================================================"
  echo "starting port forwarding pod '${pod_name}'"
  kubectl run --env REMOTE_HOST=${target_host} \
              --env REMOTE_PORT=${target_port} \
              --env LOCAL_PORT=${target_port} \
              --port ${target_port} --image marcnuri/port-forward "${pod_name}"
  echo "================================================================================"
  echo ""

  echo "================================================================================"
  echo "waiting for port forwarding pod '${pod_name}' to be ready"
  kubectl wait --for=condition=Ready "pod/${pod_name}"
  echo "================================================================================"
  echo ""

  echo "================================================================================"
  echo "starting local port forward on port localhost:${local_port} to pod '${pod_name}:${target_port}'"
  kubectl port-forward "${pod_name}" ${local_port}:${target_port}
  echo "================================================================================"
  echo ""
}

function delete_pod {
  local target_host="${1}"
  local target_port="${2}"
  local pod_name=$(pod_name "${target_host}" "${target_port}")

  echo ""
  echo ""
  echo "================================================================================"
  echo "deleting port forwarding pod '${pod_name}"
  kubectl delete pod "${pod_name}"
  echo "================================================================================"
}


show_usage() {
  echo "starts a socat kubernetes service and forwards a randomly
chosen local tcp port via socat to tcp:<target host>:<target port>

usage: $0 -h <target host> -p <target port>" 1>&2
  exit 1
}

check_os

while getopts ":h:p:" o; do
  case "${o}" in
    h)
      host=${OPTARG} ;;
    p)
      port=${OPTARG} ;;
    *)
      show_usage ;;
  esac
done
shift $((OPTIND-1))

if [ -z "${host:-}" ] || [ -z "${port:-}" ]; then
    show_usage
fi

trap 'delete_pod ${host} ${port}' SIGINT SIGTERM ERR

run_port_forward "${host}" "${port}"
